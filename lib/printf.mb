// Prototype Mb implementation of printf.

///////
// Now we can implement some actual *printf functions in terms of
// all that stuff.
macro __vprintf_out!(c) { n += 1; ::prelude::print_char($c as i32) }
fn vprintf(fmt: *u8, args: **()) -> i32 {
    let n = 0;
    do_printf!(fmt, args, __vprintf_out!);
    n
}
macro printf!(fmt) { call_printf!(::prelude::printf::vprintf, varargs!(...), $fmt) }

macro __vsnprintf_out!(c) { {
    if n+1 < size {
        out[n] = $c;
    }
    n += 1;
} }
fn vsnprintf(out: *u8, size: u32, fmt: *u8, args: **()) -> i32 {
    let n: u32 = 0;
    do_printf!(fmt, args, __vsnprintf_out!);

    // Null terminate - normal case
    if n < size {
        out[n] = 0;
    } else if size > 0 { // Overflow case - but not if size == 0
        out[size-1] = 0;
    }

    n as i32
}
macro snprintf!(s, size, fmt) {
    call_printf!(::prelude::printf::vsnprintf, varargs!(...), $s, $size, $fmt)
}


// This is here because it needs to use printf! and because
// the IR compiler is too slow compiling printf right now.
macro assert!(cond) {
    if !($cond) {
        printf!("Assertion failed: %s (%s:%d)\n",
                 stringify!($cond),
                 file!(),
                 line!()+1);
        rt_abort();
    }
}
